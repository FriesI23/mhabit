name: Build macOS
description: >
  General macOS build process.
  Build outputs are located in `build/macos/Build/Products/Release`.
  Requires Flutter and Xcode installed on the runner.

inputs:
  package-dmg:
    description: Option to package the app into a .dmg installer (true/false)
    required: false
    default: "true"

outputs:
  path:
    description: Path to the generated app
    value: ${{ steps.build-macos.outputs.path }}
  dmg-path:
    description: Path to the generated dmg
    value: ${{ steps.build-dmg.outputs.path }}

runs:
  using: composite
  steps:
    - name: Import Certificate
      env:
        KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        APPLE_DEV_CERT_PASSWORD: ${{ secrets.APPLE_DEV_CERT_PASSWORD }}
        APPLE_DEV_CERT_P12_BASE64: ${{ secrets.APPLE_DEV_CERT_P12_BASE64 }}
      run: |
        # refs: https://docs.github.com/en/actions/use-cases-and-examples/deploying/installing-an-apple-certificate-on-macos-runners-for-xcode-development
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        # import certificate from secrets
        echo "$APPLE_DEV_CERT_P12_BASE64" | base64 --decode > $CERTIFICATE_PATH
        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        # import certificate to keychain
        security import $CERTIFICATE_PATH \
          -k $KEYCHAIN_PATH \
          -P "$APPLE_DEV_CERT_PASSWORD" \
          -A -t cert -f pkcs12
        security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
      shell: bash
    - name: Extract App Store Connect API Key
      env:
        APPLE_API_KEY_ID: ${{ secrets.APPLE_MACOS_API_KEY_ID }}
        APPLE_API_AUTHKEY_P8_BASE64: ${{ secrets.APPLE_MACOS_API_AUTHKEY_P8_BASE64 }}
      run: |
        mkdir ./private_keys
        echo -n "$APPLE_API_AUTHKEY_P8_BASE64" | base64 --decode --output ./private_keys/AuthKey_$APPLE_API_KEY_ID.p8
      shell: bash
    - name: Build And Archive App
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        flutter build macos --release --config-only --flavor f_generic
        xcodebuild CODE_SIGNING_ALLOWED=NO \
          -workspace macos/Runner.xcworkspace \
          -scheme f_generic \
          -archivePath build/macos/Runner.xcarchive \
          archive
        ls -al build/macos/Runner.xcarchive/Products/Applications
      shell: bash
    - name: Signed and Exported App
      id: build-macos
      env:
        APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_MACOS_API_KEY_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        OUTPUT_PATH: build/macos/Build/Products/Release/mhabit.app
      run: |
        envsubst \
          < ./installers/macos_exporter/GithubExportOptions.plist \
          > ./installers/macos_exporter/GithubExportOptions.resolved.plist
        cat ./installers/macos_exporter/GithubExportOptions.resolved.plist
        plutil -lint ./installers/macos_exporter/GithubExportOptions.resolved.plist
        xcodebuild -exportArchive -archivePath ./build/macos/Runner.xcarchive \
          -exportPath ./build/macos/Build/Products/Release \
          -exportOptionsPlist ./installers/macos_exporter/GithubExportOptions.resolved.plist \
          -allowProvisioningUpdates \
          -authenticationKeyIssuerID $APPLE_API_ISSUER_ID \
          -authenticationKeyID $APPLE_API_KEY_ID \
          -authenticationKeyPath `pwd`/private_keys/AuthKey_$APPLE_API_KEY_ID.p8
        md5sum $OUTPUT_PATH
        echo "path=$OUTPUT_PATH" >> "$GITHUB_OUTPUT"
      shell: bash
    - uses: actions/setup-node@v4
      if: ${{ inputs.package-dmg == 'true' }}
      with:
        node-version: 20
        token: ${{ secrets.APP_RELEASE_TOKEN }}
    - run: npm install -g appdmg
      if: ${{ inputs.package-dmg == 'true' }}
      shell: bash
    - name: Build macOS DMG
      id: build-dmg
      if: ${{ inputs.package-dmg == 'true' }}
      env:
        OUTPUT_PATH: ./build/macos/Build/Products/Release/mhabit.dmg
      run: |
        npm install -g appdmg
        appdmg ./installers/dmg_creator/config.json $OUTPUT_PATH
        md5sum $OUTPUT_PATH
        echo "path=$OUTPUT_PATH" >> "$GITHUB_OUTPUT"
      shell: bash
