name: App Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+\+[0-9]+'
      - 'pre-v[0-9]+.[0-9]+.[0-9]+\+[0-9]+'
      - "ci/test-action"

jobs:
  analyzing:
    uses: ./.github/workflows/_analyze.yml

  checking:
    uses: ./.github/workflows/_check.yml

  testing:
    uses: ./.github/workflows/_test.yml

  testing-report:
    permissions:
      contents: read
      actions: read
      checks: write
    needs:
      - testing
    uses: ./.github/workflows/_test_report.yml

  pre-build:
    name: Pre Building
    needs:
      - analyzing
      - checking
      - testing
      - testing-report
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Released - Basic
        uses: ncipollo/release-action@v1
        with:
          draft: true
          prerelease: ${{ startsWith(github.ref_name, 'pre-') }}
          bodyFile: "docs/release.md"
          artifactErrorsFailBuild: true
          token: ${{ secrets.APP_RELEASE_TOKEN }}

  build-android:
    name: Build android APK
    needs:
      - pre-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup_jdk
      - uses: ./.github/actions/setup_flutter
      - id: build
        uses: ./.github/actions/build_android
      - name: Released - Android
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: >
            ${{ steps.build.outputs.abb-path }},
            ${{ steps.build.outputs.apk-path }},
            ${{ steps.build.outputs.apk-v7a-path }},
            ${{ steps.build.outputs.apk-v8a-path }},
            ${{ steps.build.outputs.apk-x64-path }}
          token: ${{ secrets.APP_RELEASE_TOKEN }}

  build-ios:
    name: "Build Unsigned iOS IPA"
    needs:
      - pre-build
    runs-on: macos-latest
    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ^16
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup_flutter
      - id: build
        uses: ./.github/actions/build_ios_unsigned
      - name: Released - iOS
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: >
            ${{ steps.build.outputs.ipa-path }}
          token: ${{ secrets.APP_RELEASE_TOKEN }}

  build-macos-dmg:
    name: "Build macOS DMG"
    needs:
      - pre-build
    runs-on: macos-latest
    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ^16
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup_flutter
      - id: build
        uses: ./.github/actions/build_macos
      - name: Released - macOS
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: >
            ${{ steps.build.outputs.dmg-path }}
          token: ${{ secrets.APP_RELEASE_TOKEN }}

  build-windows-msix:
    name: "Build windows MSIX Installer"
    needs:
      - pre-build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup_flutter
      - name: Exposed Certificate
        shell: bash
        run: echo "${{ secrets.APP_SIGN_KEY_PFX }}" | base64 --decode > windows/certificate/publish.pfx
      - name: Build MSIX
        run: .flutter\bin\dart run msix:create --architecture x64 --output-name mhabit_x64 --certificate-path windows\certificate\publish.pfx --certificate-password '${{ secrets.APP_SIGN_KEY_PFX_PASSWORD }}' --signtool-options "/td SHA256" --install-certificate false
      - name: Released - Windows
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: >
            build/windows/x64/runner/Release/mhabit_x64.msix
          token: ${{ secrets.APP_RELEASE_TOKEN }}
      - name: Built - Windows
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: Windows-x64
          path: build/windows/x64/runner/Release/mhabit_x64.msix

  build-linux:
    name: "Build Linux Bundle"
    needs:
      - pre-build
    strategy:
      # symbol `g_once_init_enter_pointer`` was introduced in glib>=2.80,
      # fallback build host to ubuntu-22.04 for better compatibility.
      # refs: https://github.com/cirruslabs/docker-images-flutter/issues/337.
      matrix:
        variant:
          - arch: x86_64
            runner: ubuntu-22.04
            bundle_path: build/linux/x64/release/bundle
          - arch: aarch64
            runner: ubuntu-22.04-arm
            bundle_path: build/linux/arm64/release/bundle
    runs-on: ${{ matrix.variant.runner }}
    steps:
      - uses: actions/checkout@v4
      - name: Init Flutter Depends
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            curl git unzip xz-utils zip libglu1-mesa \
            clang cmake git \
            ninja-build pkg-config \
            libgtk-3-dev liblzma-dev \
            libstdc++-12-dev
      - name: Init Flutter
        uses: ./.github/actions/setup_flutter
      - name: Build Linux Bundle
        env:
          BUNDLE_PATH: ${{ matrix.variant.bundle_path }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            libsqlite3-0 libsqlite3-dev \
            libsecret-1-dev libjsoncpp-dev
          flutter build linux --release
          ls -al $BUNDLE_PATH
      - name: Upload Bundle
        uses: actions/upload-artifact@v4
        with:
          name: linux-bundle-${{ matrix.variant.arch }}
          path: ${{ matrix.variant.bundle_path }}
          if-no-files-found: error
          retention-days: 1

  build-linux-flatpak:
    name: "Build linux Flatpak Installer"
    needs:
      - build-linux
    container:
      image: ghcr.io/flathub-infra/flatpak-github-actions:freedesktop-23.08
      options: --privileged
    strategy:
      matrix:
        variant:
          - arch: x86_64
            runner: ubuntu-22.04
            bundle_path: build/linux/x64/release/bundle
          - arch: aarch64
            runner: ubuntu-22.04-arm
            bundle_path: build/linux/arm64/release/bundle
    runs-on: ${{ matrix.variant.runner }}
    env:
      ARTIFACT_NAME: linux-bundle-${{ matrix.variant.arch }}
      FLATPAK_BUNDLE: mhabit-${{ matrix.variant.arch }}.flatpak
    steps:
      - uses: actions/checkout@v4
      - name: Fetch Bundle
        id: fetch-bundle-step
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ matrix.variant.bundle_path }}
          github-token: ${{ secrets.APP_RELEASE_TOKEN }}
      - run: ls -al ${{ matrix.variant.bundle_path }}
      - name: Build .flatpak
        uses: flatpak/flatpak-github-actions/flatpak-builder@v6
        with:
          bundle: ${{ env.FLATPAK_BUNDLE }}
          manifest-path: configs/flatpak_builder/io.github.friesi23.mhabit.yml
          arch: ${{ matrix.variant.arch }}
          branch: main
          upload-artifact: false
      - name: Released - Linux
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: >
            ${{ env.FLATPAK_BUNDLE }}
          token: ${{ secrets.APP_RELEASE_TOKEN }}
