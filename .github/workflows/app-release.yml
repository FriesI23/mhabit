name: App Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+\+[0-9]+'
      - 'pre-v[0-9]+.[0-9]+.[0-9]+\+[0-9]+'
      - 'action-v[0-9]+.[0-9]+.[0-9]+\+[0-9]+'

env:
  PROPERTIES_PATH: "./android/key.properties"

jobs:
  analyzing:
    uses: ./.github/workflows/_analyze.yml

  checking:
    uses: ./.github/workflows/_check.yml

  testing:
    uses: ./.github/workflows/_test.yml

  testing-report:
    permissions:
      contents: read
      actions: read
      checks: write
    needs:
      - testing
    uses: ./.github/workflows/_test_report.yml

  pre-build:
    name: Pre Building
    needs:
      - analyzing
      - checking
      - testing
      - testing-report
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Released - Basic
        uses: ncipollo/release-action@v1
        with:
          draft: true
          prerelease: ${{ startsWith(github.ref_name, 'pre-') }}
          bodyFile: "docs/release.md"
          artifactErrorsFailBuild: true
          token: ${{ secrets.APP_RELEASE_TOKEN }}

  build-android:
    name: Build android APK
    needs:
      - pre-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup_jdk
      - uses: ./.github/actions/setup_flutter
      - name: Signing APK
        run: |
          echo keyPassword=\${{ secrets.APP_SIGN_KEY_PASSWORD }} > ${{env.PROPERTIES_PATH}}
          echo storePassword=\${{ secrets.APP_SIGN_STORE_PASSWORD }} >> ${{env.PROPERTIES_PATH}}
          echo keyAlias=\${{ secrets.APP_SIGN_KEY_ALIAS }} >> ${{env.PROPERTIES_PATH}}
          echo storeFile=key.jks >> ${{env.PROPERTIES_PATH}}
          echo "${{ secrets.APP_SIGN_KEY_JKS }}" | base64 --decode > android/app/key.jks
      - name: Build APPBUNDLE
        run: |
          flutter build appbundle --release --flavor f_generic
          mkdir -p build/app/outputs/bundle/release
          cp build/app/outputs/bundle/f_genericRelease/app-f_generic-release.aab \
            build/app/outputs/bundle/release/app-release.aab
          md5sum build/app/outputs/bundle/release/app-release.aab
      - name: Build FAT-APK
        run: |
          flutter build apk --release
          md5sum build/app/outputs/flutter-apk/app-release.apk

      - name: Build APK
        run: |
          flutter build apk --split-per-abi
          md5sum build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
          md5sum build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
          md5sum build/app/outputs/flutter-apk/app-x86_64-release.apk
      - name: Released - Android
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: >
            build/app/outputs/bundle/release/app-release.aab,
            build/app/outputs/flutter-apk/app-release.apk,
            build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk,
            build/app/outputs/flutter-apk/app-arm64-v8a-release.apk,
            build/app/outputs/flutter-apk/app-x86_64-release.apk
          token: ${{ secrets.APP_RELEASE_TOKEN }}

  build-macos-dmg:
    name: "Build macos DMG"
    needs:
      - pre-build
    runs-on: macos-latest
    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ^16
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup_flutter
      - name: Import Certificate
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # refs: https://docs.github.com/en/actions/use-cases-and-examples/deploying/installing-an-apple-certificate-on-macos-runners-for-xcode-development
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate from secrets
          echo "${{ secrets.APPLE_DEV_CERT_P12_BASE64 }}" | base64 --decode > $CERTIFICATE_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH \
            -k $KEYCHAIN_PATH \
            -P "${{ secrets.APPLE_DEV_CERT_PASSWORD }}" \
            -A -t cert -f pkcs12
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: Extract App Store Connect API Key
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_MACOS_API_KEY_ID }}
          APPLE_API_AUTHKEY_P8_BASE64: ${{ secrets.APPLE_MACOS_API_AUTHKEY_P8_BASE64 }}
        run: |
          mkdir ./private_keys
          echo -n "$APPLE_API_AUTHKEY_P8_BASE64" | base64 --decode --output ./private_keys/AuthKey_$APPLE_API_KEY_ID.p8
      - name: Build APP
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          flutter build macos --release --config-only
          xcodebuild CODE_SIGNING_ALLOWED=NO \
            -workspace macos/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/macos/Runner.xcarchive \
            archive
          ls -al build/macos/Runner.xcarchive/Products/Applications
      - name: Signed APP
        env:
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_MACOS_API_KEY_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          envsubst \
            < ./installers/macos_exporter/GithubExportOptions.plist \
            > ./installers/macos_exporter/GithubExportOptions.resolved.plist
          cat ./installers/macos_exporter/GithubExportOptions.resolved.plist
          plutil -lint ./installers/macos_exporter/GithubExportOptions.resolved.plist
          xcodebuild -exportArchive -archivePath ./build/macos/Runner.xcarchive \
            -exportPath ./build/macos/Build/Products/Release \
            -exportOptionsPlist ./installers/macos_exporter/GithubExportOptions.resolved.plist \
            -allowProvisioningUpdates \
            -authenticationKeyIssuerID $APPLE_API_ISSUER_ID \
            -authenticationKeyID $APPLE_API_KEY_ID \
            -authenticationKeyPath `pwd`/private_keys/AuthKey_$APPLE_API_KEY_ID.p8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          token: ${{ secrets.APP_RELEASE_TOKEN }}
      - run: npm install -g appdmg
      - name: Build DMP
        run: appdmg ./installers/dmg_creator/config.json ./build/macos/Build/Products/Release/mhabit.dmg
      - name: Released - MacOS
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: >
            build/macos/Build/Products/Release/mhabit.dmg
          token: ${{ secrets.APP_RELEASE_TOKEN }}

  build-windows-msix:
    name: "Build windows MSIX Installer"
    needs:
      - pre-build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup_flutter
      - name: Exposed Certificate
        shell: bash
        run: echo "${{ secrets.APP_SIGN_KEY_PFX }}" | base64 --decode > windows/certificate/publish.pfx
      - name: Build MSIX
        run: .flutter\bin\dart run msix:create --architecture x64 --output-name mhabit_x64 --certificate-path windows\certificate\publish.pfx --certificate-password '${{ secrets.APP_SIGN_KEY_PFX_PASSWORD }}' --install-certificate false
      - name: Released - Windows
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: >
            build/windows/x64/runner/Release/mhabit_x64.msix
          token: ${{ secrets.APP_RELEASE_TOKEN }}
