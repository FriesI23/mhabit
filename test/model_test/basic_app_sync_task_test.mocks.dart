// Mocks generated by Mockito 5.4.4 from annotations
// in mhabit/test/model_test/basic_app_sync_task_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mhabit/model/app_sync_server.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDateTime_0 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppSyncServerForm_1 extends _i1.SmartFake
    implements _i2.AppSyncServerForm {
  _FakeAppSyncServerForm_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppSyncServer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppSyncServer extends _i1.Mock implements _i2.AppSyncServer {
  MockAppSyncServer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  String get identity => (super.noSuchMethod(
        Invocation.getter(#identity),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#identity),
        ),
      ) as String);

  @override
  DateTime get createTime => (super.noSuchMethod(
        Invocation.getter(#createTime),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#createTime),
        ),
      ) as DateTime);

  @override
  DateTime get modifyTime => (super.noSuchMethod(
        Invocation.getter(#modifyTime),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#modifyTime),
        ),
      ) as DateTime);

  @override
  _i2.AppSyncServerType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i2.AppSyncServerType.unknown,
      ) as _i2.AppSyncServerType);

  @override
  bool get verified => (super.noSuchMethod(
        Invocation.getter(#verified),
        returnValue: false,
      ) as bool);

  @override
  bool get configed => (super.noSuchMethod(
        Invocation.getter(#configed),
        returnValue: false,
      ) as bool);

  @override
  bool isSameConfig(
    _i2.AppSyncServer? other, {
    bool? withoutPassword = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isSameConfig,
          [other],
          {#withoutPassword: withoutPassword},
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.AppSyncServerForm toForm() => (super.noSuchMethod(
        Invocation.method(
          #toForm,
          [],
        ),
        returnValue: _FakeAppSyncServerForm_1(
          this,
          Invocation.method(
            #toForm,
            [],
          ),
        ),
      ) as _i2.AppSyncServerForm);

  @override
  String toDebugString() => (super.noSuchMethod(
        Invocation.method(
          #toDebugString,
          [],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #toDebugString,
            [],
          ),
        ),
      ) as String);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
